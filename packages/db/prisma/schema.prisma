// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Project {
  id              String       @id @default(cuid())
  slug            String       @unique
  name            String
  description     String?
  image           String?
  installationId  Int
  apiKeyId        String?
  encryptedApiKey String?
  datasources     DataSource[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@unique([apiKeyId])
  @@index([installationId, apiKeyId])
}

model DataSource {
  id         String    @id @default(cuid())
  repo       String
  owner      String
  baseBranch String
  path       String
  project    Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String?
  posts      Post[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt

  @@index([projectId])
}

model Post {
  id           String     @id @default(cuid())
  filename     String
  datasource   DataSource @relation(fields: [datasourceId], references: [id], onDelete: Cascade)
  datasourceId String
  reactions    Reaction[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique(fields: [datasourceId, filename], name: "unique_post")
  @@index([datasourceId])
}

enum ReactionType {
  THUMBS_UP
  THUMBS_DOWN
  LAUGH
  HOORAY
  CONFUSED
  HEART
  RANDOM
}

model Reaction {
  id               String       @id @default(cuid())
  ipAddress        String
  type             ReactionType
  value            Boolean      @default(false)
  post             Post         @relation(fields: [postDataSourceId, postFilename], references: [datasourceId, filename], onDelete: Cascade)
  postDataSourceId String
  postFilename     String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@unique(fields: [postDataSourceId, postFilename, ipAddress, type], name: "unique_reaction")
  @@index([postDataSourceId, postFilename])
}

//
// ACCOUNT MODEL
// This is generated by NextAuth
// The Account model is for information about OAuth accounts associated with a User.
// A single User can have multiple Accounts, each Account can only have one User.
//
model Account {
  id                       String    @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?   @db.Text
  refresh_token_expires_in Int?
  access_token             String?   @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?   @db.Text
  session_state            String?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime? @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

//
// USER MODEL
// This is generated by NextAuth
//
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
}

//
// VERIFICATION TOKEN MODEL
// This is generated by NextAuth
//
model VerificationToken {
  identifier String
  token      String    @unique
  expires    DateTime?

  @@unique([identifier, token])
}
