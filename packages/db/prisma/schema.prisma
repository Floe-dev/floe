// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    refresh_token_expires_in Int?
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                   String                @id @default(cuid())
    email                String                @unique
    name                 String?
    emailVerified        DateTime?
    image                String?
    accounts             Account[]
    sessions             Session[]
    workspaceMemberships WorkspaceMembership[]
}

model EncryptedKey {
    id          String    @id @default(cuid())
    name        String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId String
    key         String
    slug        String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@unique([workspaceId, slug])
    @@index([workspaceId])
}

model Workspace {
    id                String                @id @default(cuid())
    name              String
    slug              String                @unique
    docsOwner         String?
    docsRepository    String?
    docsBranch        String?
    docsPath          String?
    stripeCustomerId  String?               @unique
    members           WorkspaceMembership[]
    encrytpedKeys     EncryptedKey[]
    githubIntegration GithubIntegration?
    gitlabIntegration GitlabIntegration?
    subscription      Subscription?
}

enum MembershipRole {
    USER
    ADMIN
    OWNER
}

model WorkspaceMembership {
    id          String         @id @default(cuid())
    workspace   Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId String
    user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    role        MembershipRole @default(USER)
    createdAt   DateTime       @default(now())
    updatedAt   DateTime       @updatedAt

    @@unique([workspaceId, userId])
    @@index([userId])
    @@index([workspaceId])
}

// Note: products are created and managed in Stripe and synced to our DB via Stripe webhooks.
model Product {
    stripeProductId String  @unique
    name            String
    description     String?
    image           String?
    // Whether the product is currently available for purchase.
    active          Boolean
    // Set of key-value pairs, used to store additional information about the object in a structured format
    metadata        Json
    Price           Price[]
}

enum PricingType {
    recurring
    one_time
}

enum PlanInterval {
    day
    week
    month
    year
}

// Note: prices are created and managed in Stripe and synced to our DB via Stripe webhooks.
model Price {
    stripePriceId       String         @unique
    product             Product        @relation(fields: [productId], references: [stripeProductId])
    productId           String
    // Three-letter ISO currency code, in lowercase.
    currency            String         @db.Char(3)
    // The unit amount as a positive integer in the smallest currency unit (e.g., 100 cents for US$1.00 or 100 for Â¥100, a zero-decimal currency).
    unitAmount          Int?
    // Whether the price can be used for new purchases.
    active              Boolean
    // One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.
    pricingType         PricingType
    // The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
    pricingPlanInterval PlanInterval?
    // The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.
    intervalCount       Int?
    // Default number of trial days when subscribing a customer to this price using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).
    trialPeriodDays     Int?
    // Set of key-value pairs, used to store additional information about the object in a structured format
    metadata            Json?
    Subscription        Subscription[]

    @@index([productId])
}

// Note: subscriptions are created and managed in Stripe and synced to our DB via Stripe webhooks.
model Subscription {
    stripeSubscriptionId String    @unique
    workspace            Workspace @relation(fields: [workspaceId], references: [id])
    workspaceId          String    @unique
    price                Price     @relation(fields: [priceId], references: [stripePriceId])
    priceId              String
    // Quantity multiplied by the unit amount of the price creates the amount of the subscription. Can be used to charge multiple seats.
    quantity             Int
    // If true the subscription has been canceled by the user and will be deleted at the end of the billing period.
    cancelAtPeriodEnd    Boolean
    // Start of the current period that the subscription has been invoiced for.
    currentPeriodStart   DateTime
    // End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.
    currentPeriodEnd     DateTime
    // If the subscription has ended, the timestamp of the date the subscription ended.
    endedAt              DateTime?
    // A date in the future at which the subscription will automatically get canceled.
    cancelAt             DateTime?
    // If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will still reflect the date of the initial cancellation request, not the end of the subscription period when the subscription is automatically moved to a canceled state.
    canceledAt           DateTime?
    // If the subscription has a trial, the beginning of that trial.
    trialStart           DateTime?
    // If the subscription has a trial, the end of that trial.
    trialEnd             DateTime?
    // Set of key-value pairs, used to store additional information about the object in a structured format.
    metadata             Json?

    @@index([priceId])
}

enum IntegrationStatus {
    pending
    installed
}

model GithubIntegration {
    id             String    @id @default(cuid())
    workspace      Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId    String    @unique
    // If no installationId, the integration is pending approval.
    installationId Int?
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt

    @@index([workspaceId])
}

model GitlabIntegration {
    id                   String    @id @default(cuid())
    workspace            Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId          String    @unique
    encryptedAccessToken String
    createdAt            DateTime  @default(now())
    updatedAt            DateTime  @updatedAt

    @@index([workspaceId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
