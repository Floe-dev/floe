// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

enum MembershipRole {
    USER
    ADMIN
    OWNER
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    refresh_token_expires_in Int?
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                   String                @id @default(cuid())
    name                 String?
    email                String?               @unique
    emailVerified        DateTime?
    image                String?
    completedOnboarding  Boolean               @default(false)
    accounts             Account[]
    sessions             Session[]
    workspaceMemberships WorkspaceMembership[]
}

model EncryptedKey {
    id          String    @id @default(cuid())
    name        String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId String
    key         String
    slug        String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@unique([workspaceId, slug])
    @@index([workspaceId])
}

model Workspace {
    id                String                @id @default(cuid())
    name              String
    slug              String                @unique
    members           WorkspaceMembership[]
    encrytpedKeys     EncryptedKey[]
    githubIntegration GithubIntegration?
    gitlabIntegration GitlabIntegration?
}

model GithubIntegration {
    id             String    @id @default(cuid())
    workspace      Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId    String    @unique
    installationId Int
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt

    @@index([workspaceId])
}

model GitlabIntegration {
    id                   String    @id @default(cuid())
    workspace            Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId          String    @unique
    encryptedAccessToken String
    createdAt            DateTime  @default(now())
    updatedAt            DateTime  @updatedAt

    @@index([workspaceId])
}

model WorkspaceMembership {
    id          String         @id @default(cuid())
    workspace   Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId String
    user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    role        MembershipRole @default(USER)
    createdAt   DateTime       @default(now())
    updatedAt   DateTime       @updatedAt

    @@index([userId])
    @@index([workspaceId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
